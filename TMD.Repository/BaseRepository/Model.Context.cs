//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TMD.Repository.BaseRepository
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class Entities : DbContext
    {
        public Entities()
            : base("name=Entities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<AspNetRole> AspNetRoles { get; set; }
        public virtual DbSet<AspNetUserClaim> AspNetUserClaims { get; set; }
        public virtual DbSet<AspNetUserLogin> AspNetUserLogins { get; set; }
        public virtual DbSet<AspNetUser> AspNetUsers { get; set; }
        public virtual DbSet<Category> Categories { get; set; }
        public virtual DbSet<CategoryLog> CategoryLogs { get; set; }
        public virtual DbSet<Configuration> Configurations { get; set; }
        public virtual DbSet<DataWarehouseDimComapany> DataWarehouseDimComapanies { get; set; }
        public virtual DbSet<DataWarehouseDimDate> DataWarehouseDimDates { get; set; }
        public virtual DbSet<DataWarehouseDimProduct> DataWarehouseDimProducts { get; set; }
        public virtual DbSet<DataWarehouseDimProductType> DataWarehouseDimProductTypes { get; set; }
        public virtual DbSet<DataWarehouseFactSale> DataWarehouseFactSales { get; set; }
        public virtual DbSet<Log> Logs { get; set; }
        public virtual DbSet<StagingEbayBatchImport> StagingEbayBatchImports { get; set; }
        public virtual DbSet<StagingEbayItem> StagingEbayItems { get; set; }
        public virtual DbSet<StagingToyGraderBatchImport> StagingToyGraderBatchImports { get; set; }
        public virtual DbSet<StagingToyGraderItem> StagingToyGraderItems { get; set; }
        public virtual DbSet<sysdiagram> sysdiagrams { get; set; }
    
        public virtual ObjectResult<Nullable<int>> spIsEbayLoadRunning()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("spIsEbayLoadRunning");
        }
    
        public virtual ObjectResult<Nullable<int>> spUpsertEbayLoadStartTimeFromConfiguration(Nullable<System.DateTime> ebayLoadStartTimeFrom)
        {
            var ebayLoadStartTimeFromParameter = ebayLoadStartTimeFrom.HasValue ?
                new ObjectParameter("EbayLoadStartTimeFrom", ebayLoadStartTimeFrom) :
                new ObjectParameter("EbayLoadStartTimeFrom", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("spUpsertEbayLoadStartTimeFromConfiguration", ebayLoadStartTimeFromParameter);
        }
    
        public virtual ObjectResult<string> spGetEbayLoadStartTimeFrom()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("spGetEbayLoadStartTimeFrom");
        }
    
        public virtual int spEbayItemExists(string itemId)
        {
            var itemIdParameter = itemId != null ?
                new ObjectParameter("itemId", itemId) :
                new ObjectParameter("itemId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spEbayItemExists", itemIdParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> AddCategory(string categoryName, Nullable<int> logID)
        {
            var categoryNameParameter = categoryName != null ?
                new ObjectParameter("CategoryName", categoryName) :
                new ObjectParameter("CategoryName", typeof(string));
    
            var logIDParameter = logID.HasValue ?
                new ObjectParameter("LogID", logID) :
                new ObjectParameter("LogID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("AddCategory", categoryNameParameter, logIDParameter);
        }
    
        public virtual int ClearLogs()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ClearLogs");
        }
    
        public virtual ObjectResult<Nullable<int>> InsertCategoryLog(Nullable<int> categoryID, Nullable<int> logID)
        {
            var categoryIDParameter = categoryID.HasValue ?
                new ObjectParameter("CategoryID", categoryID) :
                new ObjectParameter("CategoryID", typeof(int));
    
            var logIDParameter = logID.HasValue ?
                new ObjectParameter("LogID", logID) :
                new ObjectParameter("LogID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("InsertCategoryLog", categoryIDParameter, logIDParameter);
        }
    }
}
